<!DOCTYPE html>
<html lang="en">
<head>
  <title>Ionik Web App</title>
</head>

<meta charset="utf-8">
<style>

.link {
  fill: none;
  stroke: #666;
  stroke-width: 1.5px;
}

#licensing {
  fill: green;
}

.link.Regular {
  stroke: green;
}

.link.OutsideOfWork {
  stroke-dasharray: 0,2 1;
}

circle {
  fill: #ccc;
  stroke: #333;
  stroke-width: 1.5px;
}

text {
  font: 10px sans-serif;
  pointer-events: none;
  text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, 0 -1px 0 #fff, -1px 0 0 #fff;
}

</style>

<body class="container">

<header>

</header>

<main>
  <h1>
    Ionik Molecule
  </h1>
</main>

<footer>
</footer>
<script src="//d3js.org/d3.v3.js"></script>

<script src="/js/jquery.min.js"></script>
<script>
$.ajax({url:"/molecule/getGraphData",
  success: (data) =>{
    let links = data.links;
    let preNodes = data.nodes;
    let colorIndex = 0;
    let colorCategory = {};
    let nodes = {};

    let colorScale = d3.scale.ordinal(d3.schemeCategory10);
    preNodes.forEach(node => {
      nodes[node.id] = node;
      if(colorCategory[node.location] == null){
        colorCategory[node.location] = colorIndex++;
        console.log(colorScale(colorIndex));
      }
    });
    console.log(colorCategory);

    // Compute the distinct nodes from the links.
    links.forEach(function(link) {
      link.source = nodes[link.source] || (nodes[link.source] = preNodes[link.source]);
      // let filtered = links.filter(l => (l.name || l.source.name) == link.target)[0];
      link.target = nodes[link.target] || (nodes[link.target] = preNodes[link.target]);
    });

    var width = 960,
        height = 500;
//d3.values(nodes))
    var force = d3.layout.force()
        .nodes(d3.values(nodes))
        .links(links)
        .size([width, height])
        .linkDistance(200)
        .charge(-300)
        .on("tick", tick)
        .start();

    var svg = d3.select("body").append("svg")
        .attr("width", width)
        .attr("height", height);

    // Per-type markers, as they don't inherit styles.
    svg.append("defs").selectAll("marker")
        .data(["OutsideOfWork", "RegularHours"])
      .enter().append("marker")
        .attr("id", function(d) { return d; })
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 15)
        .attr("refY", -1.5)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
      .append("path")
        .attr("d", "M0,-5L10,0L0,5");

    var path = svg.append("g").selectAll("path")
        .data(force.links())
      .enter().append("path")
        .attr("class", function(d) { return "link " + d.type; })
        .attr("style",function(d){return `stroke-width:${d.normalizedweight}px`})
        .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

    var circle = svg.append("g").selectAll("circle")
        .data(force.nodes())
      .enter().append("circle")
        .attr("r", function(d) { return d.normalizedweight;})
        .style("fill",function(d) { console.log(colorScale(colorCategory[d.location]));
              return colorScale(colorCategory[d.location]);})
        .call(force.drag);

    var text = svg.append("g").selectAll("text")
        .data(force.nodes())
      .enter().append("text")
        .attr("x", 8)
        .attr("y", ".35em")
        .text(function(d) { return d.name; });

    // Use elliptical arc path segments to doubly-encode directionality.
    function tick() {
      path.attr("d", linkArc);
      circle.attr("transform", transform);
      text.attr("transform", transform);
    }

    function linkArc(d) {
      var dx = d.target.x - d.source.x,
          dy = d.target.y - d.source.y,
          dr = Math.sqrt(dx * dx + dy * dy),
          plusdr = dr;
      if(d.type == "OutsideOfWork"){
        plusdr = dr + 100;
      }
      return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + plusdr + " 0 0,1 " + d.target.x + "," + d.target.y;
    }

    function transform(d) {
      return "translate(" + d.x + "," + d.y + ")";
    }

  }
});


</script>
</body>
</html>